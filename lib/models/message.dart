import 'package:cloud_firestore/cloud_firestore.dart'; // Import Firestore for Timestamp

class Message {
  String? id; 
  // Firestore's local cache mechanism enables optimistic UI updates by immediately 
  // writing to the local cache, then synchronizing with the server in the background. 
  // There's no need to provide a fallback value for 'id' as it will be generated by Firebase
  // BEFORE the write operation to the local cache. 
  // Thus, objects fetched or streamed from the repository always have IDs.
  final String text;
  final String? discoveryUrl;

  final String userId;
  final String userName;
  final String userAvatarUrl;

  Timestamp? _createdDate;
  Timestamp get createdDate =>
      _createdDate ??
      Timestamp
          .now(); // Unlike 'id', the '_createdDate' is only assigned a value at the time the data is written to the Firestore database on the server. Before this synchronization, '_createdDate' will be null in the local cache. Here, we provide a fallback value for the UI to render it properly.

  // Constructor for Views or ViewModels
  Message({
    required this.text,
    this.discoveryUrl,
    required this.userId,
    required this.userName,
    required this.userAvatarUrl,
  });

  Message._({
    required this.id,
    required this.text,
    this.discoveryUrl,
    required this.userId,
    required this.userName,
    required this.userAvatarUrl,
    required Timestamp? createdDate,
  }) : _createdDate = createdDate;

  factory Message.fromMap(Map<String, dynamic> map, String id) {
    return Message._(
      id: id,
      text: map['text'],
      discoveryUrl: map['discoveryUrl'],
      userId: map['userId'],
      userName: map['userName'],
      userAvatarUrl: map['userAvatarUrl'],
      createdDate: map['createdDate'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'text': text,
      'discoveryUrl': discoveryUrl,
      'userId': userId,
      'userName': userName,
      'userAvatarUrl': userAvatarUrl,
      'createdDate': _createdDate,
    };
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Message && runtimeType == other.runtimeType && id == other.id;

  @override
  int get hashCode => id.hashCode;
}
